name: "terraform"
# This workflow expects will run automatically when a PR is created, updated, or synchronized.
# Those events cause a terraform plan to be exeucuted and the results of the plan are added
# to the PR as a comment.  Until the plan phase succeeds, the PR cannont be be merged into
# the source branch (generally master).  Once the plan phase succeeds, the final merge
# becomes available and upon merge, the terraform apply phase is executed.

#Env Vars:
# ARM_CLIENT_ID: 
# ARM_CLIENT_SECRET: 
# ARM_SUBSCRIPTION_ID: The subscription ID of the customer
# ARM_TENANT_ID: The tenant ID of the 

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true" # any non-empty value to set
    steps:
      # Check out the repository
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
      
      # Set git configuration variables
      - name: Configure multi-repo credential substitution
        run: |
          git config --local user.name "ucsf-devops-bot"
          git config --local url."https://${GH_TOKEN}@github.com/UCSF-DevOps".insteadOf "https://github.com/UCSF-DevOps"
          git config --global user.name "ucsf-devops-bot"
          git config --global url."https://${GH_TOKEN}@github.com/UCSF-DevOps".insteadOf "https://github.com/UCSF-DevOps"
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      
      - name: Setup Terraformsecrets.GH_PERSONAL_ACCESS_TOKEN
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      # Ensure that the terraform code follows best practices
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      
      # Initialize terraform to ensure all providers/plugins are current
      - name: Terraform Init
        id: init
        run: terraform init
      
      # Validate the terraform configuration
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      
      # Execute the planning phase of terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      
      # Write the resulting plan back to the PR
      - name: Update Pull Request With Plan
        id: update_pr_plan
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization: \`${{ steps.init.outcome }}\`
            #### Terraform Plan: \`${{ steps.plan.outcome }}\`
            #### Terraform Validation: \`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      # If the plan status is failure, 
      - name: Terraform Plan Status
        id: on_failure
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      # If this is a push to master, execute the apply phase of terraform
      # A branch protection should *ALSO* be set to only allow merges (no direct pushes)
      - name: Terraform Apply
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve        
        continue-on-error: false

      # FOR DEMO PURPOSES ONLY
      # This commit and push is only to get the .tfstate files into git post APPLY since
      # state is stored locally.
      - name: Git commit and merge
        id: git_merge
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "Merging to master" && git add . && git commit -m"Auto merge from workflow" && git push

      
