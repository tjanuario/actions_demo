name: "secrets"
# This workflow expects will run automatically when a PR is created, updated, or synchronized.
# Those events cause a terraform plan to be exeucuted and the results of the plan are added
# to the PR as a comment.  Until the plan phase succeeds, the PR cannont be be merged into
# the source branch (generally master).  Once the plan phase succeeds, the final merge
# becomes available and upon merge, the terraform apply phase is executed.

#Env Vars:
# ARM_CLIENT_ID: 
# ARM_CLIENT_SECRET: 
# ARM_SUBSCRIPTION_ID: The subscription ID of the customer
# ARM_TENANT_ID: The tenant ID of the 

on:
  push:
    branches:
      - main
  pull_request:

  jobs:
  secrets:
    name: 'Secrets'
    runs-on: ubuntu-latest
    steps:
      # Spill with GitHub Script
      - name: GitHub Script
        id: script
        env:
          MYSECRET: ${{ secrets.MYSECRET }}
          MYSECRET2: ${{ secrets.MYSECRET2 }}
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            echo $MYSECRET
            echo $MYSECRET2
        continue-on-error: true
        
      # Normal run operation
      - name: Normal run
        id: run
        env:
          MYSECRET: ${{ secrets.MYSECRET }}
          MYSECRET2: ${{ secrets.MYSECRET2 }}
        run: |
            echo $MYSECRET
            echo $MYSECRET2
        continue-on-error: true

      # Check out the repository
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
            
      - name: Setup Terraformsecrets.GH_PERSONAL_ACCESS_TOKEN
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0
          cli_config_credentials_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
      
      # Initialize terraform to ensure all providers/plugins are current
      - name: Terraform Init
        id: init
        run: terraform init
      
      # Execute the planning phase of terraform
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      
      # Write the resulting plan back to the PR
      - name: Update Pull Request With Plan
        id: update_pr_plan
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "TERRAFORM PLAN\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization: \`${{ steps.init.outcome }}\`
            #### Terraform Plan: \`${{ steps.plan.outcome }}\`
            #### Terraform Validation: \`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })